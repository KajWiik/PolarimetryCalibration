using PolarimetryCalibration, Plots, LaTeXStrings, JLD, NLopt, Debug

cal = load("../data/3C286_20160229.jld")
tovector(a) = reshape(a, length(a))

pa = tovector(cal["pa"])
I = tovector(cal["i"])
Q = tovector(cal["q"])
U = tovector(cal["u"])
V = tovector(cal["v"])


tovector(a) = reshape(a, length(a))
    
@debug function cost_circ(x, grad)
    sumsq = 0.0
    for ind in 1:length(pa)
 #       @bp
        model = müller_rec(ϵ = x[1], ϕ = x[2], ΔG = x[3], ψ = x[4],
                           α = deg2rad(45.0))* # Circular feed
        müller_sky(pa[ind])*
        lin_pol_source(flux = x[5], p = x[6], pa = deg2rad(34.0))
        sumsq += (model[1] - I[ind])^2 +
        (model[2] - V[ind])^2 +
        (model[3] - U[ind])^2 +
        (model[4] + Q[ind])^2
    end
    @show typeof(model)
    return sumsq
end
        
# Set up NLopt
opt = Opt(:LN_COBYLA, 6)
ftol_rel!(opt, 0.0001)

initial_step!(opt, [0.1, 0.1, 0.1, 0.1, 0.1, 0.01])
lower_bounds!(opt, [-pi, -pi, -10, -pi, 0.0, 0.01])
upper_bounds!(opt, [pi, pi, 10, pi, 10.0, 1.0])

min_objective!(opt, (x, grad) -> cost_circ(x, grad)) #
minf, fit_param = optimize!(opt, [0.0, 0.0, 0.0, 0.0, 0.1, 0.03])

PArange = minimum(pa):1.0:maximum(pa)
model = Float64[(müller_rec(ϵ = fit_param[1],
                    ϕ = fit_param[2],
                    ΔG = fit_param[3],
                    ψ = fit_param[4],
                    α = deg2rad(45.0))* # Circular feed
         müller_sky(deg2rad(PAaz))*
         lin_pol_source(flux = fit_param[5],
                        p = fit_param[6],
                        pa = deg2rad(34.0)))[i] 
         for PAaz in PArange, i in 1:4]

#plot(PArange, model[:,1], label = "I")
#plot(PArange, model[:,2],label = "V")
plot(PArange, -model[:,3],label = "U")
#plot!(PArange, -model[:,4],label = "Q")
#scatter!(pa, I, markersize = 3)
#scatter!(pa, Q, markersize = 3)
scatter!(pa, U, markersize = 3)
#scatter!(pa, V, markersize = 3)
